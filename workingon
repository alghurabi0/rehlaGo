<form method="POST" enctype="multipart/form-data" action="/upload">
    <input type="text" name="title" placeholder="Title" />
    <input type="number" name="rating" placeholder="Rating" />
    <input type="file" name="photo" />
    <input type="submit" value="Upload" />
</form>


package main

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"log"
	firebase "firebase.google.com/go"
	"google.golang.org/api/option"
	"cloud.google.com/go/storage"
)

var storageBucket *storage.BucketHandle

func initFirebase() {
	// Load the Firebase Admin SDK credentials
	sa := option.WithCredentialsFile("serviceAccountKey.json")

	// Initialize the Firebase App
	app, err := firebase.NewApp(context.Background(), nil, sa)
	if err != nil {
		log.Fatalf("error initializing app: %v\n", err)
	}

	// Get the Firebase Storage client
	client, err := app.Storage(context.Background())
	if err != nil {
		log.Fatalf("error getting Storage client: %v\n", err)
	}

	// Set the storage bucket
	storageBucket, err = client.Bucket("your-firebase-storage-bucket-url")
	if err != nil {
		log.Fatalf("error getting bucket: %v\n", err)
	}
}

func uploadHandler(w http.ResponseWriter, r *http.Request) {
	// Parse the multipart form data (max 10MB file size)
	err := r.ParseMultipartForm(10 << 20) // 10MB
	if err != nil {
		http.Error(w, "Error parsing form data", http.StatusInternalServerError)
		return
	}

	// Retrieve non-file form data
	title := r.FormValue("title")
	rating := r.FormValue("rating")

	// Validate that form data is present
	if title == "" || rating == "" {
		http.Error(w, "Title and rating are required", http.StatusBadRequest)
		return
	}

	// Retrieve the file from the form
	file, handler, err := r.FormFile("photo")
	if err != nil {
		http.Error(w, "Error Retrieving the File", http.StatusInternalServerError)
		return
	}
	defer file.Close()

	// Upload the file to Firebase Storage
	wc := storageBucket.Object(handler.Filename).NewWriter(context.Background())
	defer wc.Close()

	// Copy the uploaded file's content to Firebase Storage
	if _, err := io.Copy(wc, file); err != nil {
		http.Error(w, "Error uploading file to Firebase", http.StatusInternalServerError)
		return
	}

	// Respond with success message
	fmt.Fprintf(w, "Successfully Uploaded File: %s with Title: %s and Rating: %s", handler.Filename, title, rating)
}

func main() {
	// Initialize Firebase
	initFirebase()

	// Set up the file upload route
	http.HandleFunc("/upload", uploadHandler)

	// Serve the HTML form and other assets
	http.Handle("/", http.FileServer(http.Dir("./static")))

	// Start the server
	http.ListenAndServe(":8080", nil)
}

1f232e4749bbbef320b35a03122e1bd4953dcb90022f73d054ebca253a38cc48
